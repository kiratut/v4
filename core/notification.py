#!/usr/bin/env python3
"""
HH v4 NOTIFICATION MODULE
Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤

–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: 2.6.2 (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram)
–ê–≤—Ç–æ—Ä: AI Assistant  
–î–∞—Ç–∞: 23.09.2025
"""

import json
import time
import logging
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List, Optional, Union
from queue import Queue, Empty
import threading
import requests


class TelegramNotificationError(Exception):
    """–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    pass


class NotificationMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    def __init__(self, text: str, priority: str = 'INFO', parse_mode: str = 'HTML'):
        self.text = text
        self.priority = priority  # INFO, WARNING, CRITICAL
        self.parse_mode = parse_mode
        self.timestamp = datetime.now()
        self.attempts = 0
        self.max_attempts = 3


class TelegramNotifier:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, config_path: str = None):
        self.config_path = config_path or str(Path(__file__).parent.parent / "config" / "config_v4.json")
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = self._load_config()
        self.telegram_config = self.config.get('telegram', {})
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.enabled = self.telegram_config.get('enabled', False)
        self.token = self.telegram_config.get('token', '')
        self.chat_id = self.telegram_config.get('chat_id', '')
        
        # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.message_queue = Queue(maxsize=self.telegram_config.get('queue_max_size', 100))
        self.error_count = 0
        self.error_threshold = self.telegram_config.get('error_threshold', 5)
        self.last_error_time = 0
        self.retry_delay_minutes = self.telegram_config.get('retry_delay_minutes', 5)
        
        # –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.worker_thread = None
        self.stop_event = threading.Event()
        
        if self.enabled and self._validate_credentials():
            self._start_worker()
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
            return {}
    
    def _validate_credentials(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram"""
        if not self.token.strip():
            self.logger.warning("Telegram token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        if not self.chat_id.strip():
            self.logger.warning("Telegram chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        return True
    
    def _start_worker(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.worker_thread and self.worker_thread.is_alive():
            return
        
        self.stop_event.clear()
        self.worker_thread = threading.Thread(target=self._message_worker, daemon=True)
        self.worker_thread.start()
        self.logger.info("Telegram worker thread –∑–∞–ø—É—â–µ–Ω")
    
    def _stop_worker(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.worker_thread and self.worker_thread.is_alive():
            self.stop_event.set()
            self.worker_thread.join(timeout=5)
            self.logger.info("Telegram worker thread –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def send_alert(self, message: str, severity: str = 'WARNING') -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.enabled:
            self.logger.debug(f"Telegram –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º alert: {message}")
            return False
        
        if not self.telegram_config.get('alerts_enabled', True):
            self.logger.debug("Telegram –∞–ª–µ—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
        severity_emoji = {
            'INFO': '‚ÑπÔ∏è',
            'WARNING': '‚ö†Ô∏è',
            'CRITICAL': 'üî¥',
            'ERROR': '‚ùå'
        }
        
        emoji = severity_emoji.get(severity, 'üì¢')
        timestamp = datetime.now().strftime('%H:%M:%S %d.%m.%Y')
        
        formatted_message = f"{emoji} <b>HH v4 Alert</b>\n\n" \
                          f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {severity}\n" \
                          f"<b>–í—Ä–µ–º—è:</b> {timestamp}\n\n" \
                          f"{message}"
        
        return self._queue_message(formatted_message, severity)
    
    def send_daily_summary(self, summary_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        if not self.enabled:
            return False
        
        if not self.telegram_config.get('daily_summary_enabled', True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        summary_time = self.telegram_config.get('daily_summary_time', '09:00')
        current_time = datetime.now().strftime('%H:%M')
        
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏
        
        try:
            message = self._format_daily_summary(summary_data)
            return self._queue_message(message, 'INFO')
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return False
    
    def send_system_health(self, health_report: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.enabled:
            return False
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'telegram_message' in health_report:
                message = health_report['telegram_message']
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
                message = self._format_health_report(health_report)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
            overall_status = health_report.get('overall_status', 'UNKNOWN')
            priority = 'CRITICAL' if overall_status == 'CRITICAL' else 'WARNING' if overall_status in ['WARNING', 'ERROR'] else 'INFO'
            
            return self._queue_message(message, priority)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return False
    
    def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
        if not self._validate_credentials():
            return {
                'success': False,
                'error': 'Telegram credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
            }
        
        test_message = self.telegram_config.get('test_message', 'HH Bot v4 test message')
        
        try:
            success = self._send_message_direct(f"üß™ {test_message}\n‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}")
            
            if success:
                return {
                    'success': True,
                    'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
                }
            else:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}'
            }
    
    def get_queue_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            'queue_size': self.message_queue.qsize(),
            'max_size': self.message_queue.maxsize,
            'worker_alive': self.worker_thread.is_alive() if self.worker_thread else False,
            'error_count': self.error_count,
            'error_threshold': self.error_threshold,
            'last_error_time': self.last_error_time,
            'enabled': self.enabled
        }
    
    def _queue_message(self, text: str, priority: str = 'INFO') -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫
            if self._is_temporarily_disabled():
                self.logger.warning("Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ API")
                return False
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            max_length = self.telegram_config.get('message_max_length', 4096)
            if len(text) > max_length:
                text = text[:max_length-50] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            message = NotificationMessage(text, priority)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
            if self.message_queue.full():
                self.logger.warning("–û—á–µ—Ä–µ–¥—å Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False
            
            self.message_queue.put_nowait(message)
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
    
    def _message_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("Telegram message worker –∑–∞–ø—É—â–µ–Ω")
        
        while not self.stop_event.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                message = self.message_queue.get(timeout=1.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                if self._is_temporarily_disabled():
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∑–∂–µ
                    if message.attempts < message.max_attempts:
                        message.attempts += 1
                        self.message_queue.put_nowait(message)
                    time.sleep(5)
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = self._send_message_direct(message.text, message.parse_mode)
                
                if success:
                    self.logger.debug(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.priority}")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    self.error_count = max(0, self.error_count - 1)
                else:
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    message.attempts += 1
                    if message.attempts < message.max_attempts and message.priority in ['CRITICAL', 'WARNING']:
                        self.message_queue.put_nowait(message)
                        self.logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.attempts}/{message.max_attempts}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                time.sleep(1)
                
            except Empty:
                # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                continue
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram worker: {e}")
                time.sleep(5)
        
        self.logger.info("Telegram message worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _send_message_direct(self, text: str, parse_mode: str = 'HTML') -> bool:
        """–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self._validate_credentials():
            return False
        
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                return True
            elif response.status_code == 429:  # Rate limit
                self.logger.warning("Telegram rate limit –ø—Ä–µ–≤—ã—à–µ–Ω")
                self._handle_api_error()
                return False
            else:
                self.logger.error(f"Telegram API error {response.status_code}: {response.text}")
                self._handle_api_error()
                return False
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: {e}")
            self._handle_api_error()
            return False
    
    def _handle_api_error(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API"""
        self.error_count += 1
        self.last_error_time = time.time()
        
        if self.error_count >= self.error_threshold:
            self.logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ Telegram API ({self.error_count}), –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ")
    
    def _is_temporarily_disabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫"""
        if self.error_count < self.error_threshold:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        retry_delay_seconds = self.retry_delay_minutes * 60
        time_since_error = time.time() - self.last_error_time
        
        if time_since_error >= retry_delay_seconds:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            self.error_count = 0
            self.logger.info("Telegram API —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞")
            return False
        
        return True
    
    def _format_daily_summary(self, summary_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        date_str = datetime.now().strftime('%d.%m.%Y')
        
        message_parts = [
            f"üìä <b>HH v4 Daily Summary - {date_str}</b>\n"
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        if 'vacancies' in summary_data:
            vacancies = summary_data['vacancies']
            message_parts.append(
                f"üîç <b>–í–∞–∫–∞–Ω—Å–∏–∏:</b>\n"
                f"  ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {vacancies.get('loaded', 0)}\n"
                f"  ‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã: {vacancies.get('duplicates', 0)}\n"
                f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {vacancies.get('updated', 0)}\n"
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if 'system' in summary_data:
            system = summary_data['system']
            message_parts.append(
                f"üíª <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                f"  ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system.get('uptime_hours', 0):.1f}—á\n"
                f"  ‚Ä¢ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {system.get('tasks_completed', 0)}\n"
                f"  ‚Ä¢ –û—à–∏–±–∫–∏: {system.get('errors', 0)}\n"
            )
        
        # –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        if 'health' in summary_data:
            health = summary_data['health']
            health_emoji = '‚úÖ' if health.get('score', 0) >= 90 else '‚ö†Ô∏è' if health.get('score', 0) >= 70 else 'üî¥'
            message_parts.append(
                f"{health_emoji} <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:</b> {health.get('score', 0):.0f}%\n"
            )
        
        message_parts.append(f"\n‚è∞ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
        
        return "\n".join(message_parts)
    
    def _format_health_report(self, health_report: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        overall_status = health_report.get('overall_status', 'UNKNOWN')
        health_score = health_report.get('health_score', 0)
        
        status_emoji = {
            'OK': '‚úÖ',
            'WARNING': '‚ö†Ô∏è',
            'CRITICAL': 'üî¥',
            'ERROR': '‚ùå'
        }
        
        emoji = status_emoji.get(overall_status, '‚ùì')
        
        message = f"{emoji} <b>HH v4 System Health</b>\n\n"
        message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {overall_status} ({health_score:.0f}%)\n"
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        critical_issues = health_report.get('critical_issues', [])
        if critical_issues:
            message += f"\nüî¥ <b>–ö–†–ò–¢–ò–ß–ù–û:</b>\n"
            for issue in critical_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                message += f"  ‚Ä¢ {issue}\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warning_issues = health_report.get('warning_issues', [])
        if warning_issues:
            message += f"\n‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:</b>\n"
            for issue in warning_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                message += f"  ‚Ä¢ {issue}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        status_counts = health_report.get('status_counts', {})
        message += f"\nüìä –ü—Ä–æ–≤–µ—Ä–æ–∫: ‚úÖ{status_counts.get('OK', 0)} ‚ö†Ô∏è{status_counts.get('WARNING', 0)} üî¥{status_counts.get('CRITICAL', 0)}"
        
        message += f"\n‚è∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        
        return message
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞"""
        self._stop_worker()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
_notifier = None

def get_notifier() -> TelegramNotifier:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    global _notifier
    if _notifier is None:
        _notifier = TelegramNotifier()
    return _notifier
