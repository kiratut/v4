"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –ë–î –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
"""

import sqlite3
from pathlib import Path

def check_db_schema():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î v4"""
    db_path = "data/hh_v4.sqlite3"
    
    if not Path(db_path).exists():
        print(f"‚ùå –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ vacancies
    cursor.execute("PRAGMA table_info(vacancies)")
    columns = cursor.fetchall()
    
    print(f"\nüìã –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã 'vacancies' ({len(columns)} —à—Ç—É–∫):")
    for i, col in enumerate(columns):
        col_id, name, type_name, not_null, default, pk = col
        print(f"  {i+1:2d}. {name:25} | {type_name:10} | NotNull: {not_null} | PK: {pk}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT COUNT(*) FROM vacancies")
    total_count = cursor.fetchone()[0]
    print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")
    
    if total_count > 0:
        # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
        column_names = [col[1] for col in columns]
        cursor.execute(f"SELECT {', '.join(column_names[:10])} FROM vacancies LIMIT 3")
        rows = cursor.fetchall()
        
        print(f"\nüìÑ –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ (–ø–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫):")
        for i, row in enumerate(rows, 1):
            print(f"  –ó–∞–ø–∏—Å—å {i}:")
            for j, (col_name, value) in enumerate(zip(column_names[:10], row)):
                display_value = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)
                print(f"    {col_name:20}: {display_value}")
    
    conn.close()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open("utils/db_schema_results.txt", "w", encoding="utf-8") as f:
        f.write(f"–ë–î: {db_path}\n")
        f.write(f"–ö–æ–ª–æ–Ω–æ–∫: {len(columns)}\n")
        f.write(f"–ó–∞–ø–∏—Å–µ–π: {total_count}\n\n")
        f.write("–ö–û–õ–û–ù–ö–ò:\n")
        for i, col in enumerate(columns):
            col_id, name, type_name, not_null, default, pk = col
            f.write(f"{i+1:2d}. {name:25} | {type_name:10} | NotNull: {not_null} | PK: {pk}\n")
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: utils/db_schema_results.txt")

if __name__ == "__main__":
    check_db_schema()
