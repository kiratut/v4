"""
–ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
–≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ Read tool

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 20.09.2025 09:35:00
"""

import sys
import sqlite3
from pathlib import Path

def check_databases():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ë–î —Ñ–∞–π–ª–æ–≤"""
    results = []
    results.append("=== –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• ===")
    results.append(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: 2025-09-20 09:35:00")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ sqlite —Ñ–∞–π–ª—ã –≤ data/
    data_dir = Path("data")
    if not data_dir.exists():
        results.append("‚ùå –ü–∞–ø–∫–∞ data/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return results
    
    db_files = list(data_dir.glob("*.sqlite3"))
    results.append(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ –ë–î —Ñ–∞–π–ª–æ–≤: {len(db_files)}")
    
    for db_file in db_files:
        results.append(f"\nüóÑÔ∏è  –ë–î: {db_file.name}")
        results.append(f"   –†–∞–∑–º–µ—Ä: {db_file.stat().st_size} –±–∞–π—Ç ({db_file.stat().st_size / 1024 / 1024:.2f} –ú–ë)")
        
        try:
            conn = sqlite3.connect(str(db_file))
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            results.append(f"   –¢–∞–±–ª–∏—Ü: {len(tables)}")
            
            for table in tables:
                table_name = table[0]
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                    count = cursor.fetchone()[0]
                    results.append(f"   - {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                    
                    if table_name == 'vacancies' and count > 0:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                        cursor.execute(f"SELECT title, employer_name, created_at FROM {table_name} ORDER BY created_at DESC LIMIT 3")
                        recent = cursor.fetchall()
                        results.append(f"     –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                        for r in recent:
                            results.append(f"     ‚Ä¢ {r[0][:30]}... | {r[1]} | {r[2]}")
                            
                except Exception as e:
                    results.append(f"   - {table_name}: –æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ - {e}")
            
            conn.close()
            
        except Exception as e:
            results.append(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    results = check_databases()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    output_file = Path("utils/database_check_results.txt")
    with open(output_file, 'w', encoding='utf-8') as f:
        for line in results:
            f.write(line + "\n")
            
    # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    for line in results:
        print(line)
        
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")

if __name__ == "__main__":
    main()
