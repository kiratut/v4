"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
–ê–≤—Ç–æ—Ä: AI Assistant  
–î–∞—Ç–∞: 20.09.2025 08:20:00
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_export_functionality():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    try:
        from core.export import VacancyExporter
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        exporter = VacancyExporter()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
        count = exporter.get_vacancy_count()
        print(f"üìä –í–∞–∫–∞–Ω—Å–∏–π –≤ –ë–î: {count}")
        
        if count == 0:
            print("‚ö†Ô∏è  –ë–î –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...")
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
        formats = exporter.get_export_formats()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {list(formats.keys())}")
        
        for fmt_name, fmt_config in formats.items():
            print(f"   {fmt_name}: {fmt_config['name']} ({len(fmt_config['columns'])} –∫–æ–ª–æ–Ω–æ–∫)")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —ç–∫—Å–ø–æ—Ä—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if count > 0:
            test_file = Path("data/test_export.xlsx")
            print(f"üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤: {test_file}")
            
            result = exporter.export_to_excel(
                output_path=test_file,
                format_type='brief',
                limit=10
            )
            
            if result['success']:
                print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω:")
                print(f"   –ó–∞–ø–∏—Å–µ–π: {result['records_exported']}")
                print(f"   –†–∞–∑–º–µ—Ä: {result['file_size_mb']} –ú–ë")
                print(f"   –í—Ä–µ–º—è: {result['export_time_seconds']} —Å–µ–∫")
                
                if test_file.exists():
                    file_size = test_file.stat().st_size
                    print(f"   –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_size} –±–∞–π—Ç")
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    test_file.unlink()
                    print("   –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {result['errors']}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install openpyxl pandas")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_export_functionality()
    sys.exit(0 if success else 1)
