#!/usr/bin/env python3
"""
–ö–û–ù–°–û–õ–ò–î–ò–†–û–í–ê–ù–ù–´–ô –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ HH v4 WEB –ü–ê–ù–ï–õ–ò
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ simple_visual_test.py, visual_panel_test.py –∏ final_visual_test.py
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
"""

import asyncio
import logging
from logging.handlers import RotatingFileHandler
import json
import os
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
import requests

try:
    from playwright.async_api import async_playwright, Browser, Page
except ImportError:
    print("Installing Playwright...")
    import subprocess
    subprocess.run([sys.executable, '-m', 'pip', 'install', 'playwright'], check=True)
    subprocess.run([sys.executable, '-m', 'playwright', 'install', 'chromium'], check=True)
    from playwright.async_api import async_playwright, Browser, Page

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent))


class ConsolidatedVisualTest:
    """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤–µ–±-–ø–∞–Ω–µ–ª–∏"""
    
    def __init__(self):
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±—â–∏–π app.log
        try:
            (Path(__file__).parent.parent / 'logs').mkdir(parents=True, exist_ok=True)
            logger = logging.getLogger('visual_test')
            logger.setLevel(logging.INFO)
            if not any(isinstance(h, RotatingFileHandler) and getattr(h, 'baseFilename', '').endswith('app.log') for h in logger.handlers):
                handler = RotatingFileHandler(str(Path(__file__).parent.parent / 'logs' / 'app.log'), maxBytes=100*1024*1024, backupCount=3, encoding='utf-8')
                formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
                handler.setFormatter(formatter)
                logger.addHandler(handler)
            self.logger = logger
            self.logger.info('Consolidated visual test initialized')
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            self.logger = logging.getLogger('visual_test_fallback')

        self.config = self._load_config()
        self.host = self.config.get('web_interface', {}).get('host', 'localhost')
        self.port = self.config.get('web_interface', {}).get('port', 8000)
        self.base_url = f"http://{self.host}:{self.port}"
        
        self.report_dir = Path(__file__).parent.parent / 'reports' / 'consolidated_visual'
        self.report_dir.mkdir(parents=True, exist_ok=True)
        
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'test_config': {
                'base_url': self.base_url,
                'host': self.host,
                'port': self.port
            },
            'screenshots': [],
            'elements_analysis': {},
            'functionality_tests': {},
            'api_checks': {},
            'issues_found': [],
            'summary': {}
        }
        
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = Path(__file__).parent.parent / 'config' / 'config_v4.json'
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è Could not load config: {e}")
            return {}
    
    async def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.logger.info(f"Setting up browser for {self.base_url}")
        print(f"üåê Setting up browser for {self.base_url}")
        playwright = await async_playwright().start()
        
        # Headless –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ False –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.browser = await playwright.chromium.launch(
            headless=True,
            args=['--disable-web-security', '--disable-features=VizDisplayCompositor']
        )
        
        context = await self.browser.new_context(
            viewport={'width': 1920, 'height': 1080}
        )
        self.page = await context.new_page()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        self.page.set_default_timeout(30000)
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª–∏/–æ—à–∏–±–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞ -> –≤ –æ–±—â–∏–π –ª–æ–≥
        try:
            self.page.on("console", lambda msg: self.logger.warning(f"Browser console [{msg.type}]: {msg.text()}") )
            self.page.on("pageerror", lambda exc: self.logger.error(f"Browser page error: {exc}") )
        except Exception as e:
            self.logger.exception(f"Failed to attach page event handlers: {e}")
        
    async def take_screenshot(self, name: str, description: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        filename = f"{name}_{self.timestamp}.png"
        filepath = self.report_dir / filename
        
        await self.page.screenshot(path=str(filepath), full_page=True)
        
        screenshot_info = {
            'name': name,
            'description': description,
            'filepath': str(filepath),
            'timestamp': self.timestamp
        }
        self.results['screenshots'].append(screenshot_info)
        
        self.logger.info(f"Screenshot saved: {filename} - {description}")
        print(f"üì∏ Screenshot saved: {filename} - {description}")
        return str(filepath)
        
    async def analyze_page_elements(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.logger.info("Analyzing page elements...")
        print("üîç Analyzing page elements...")
        
        elements = {}
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        try:
            system_health = await self.page.locator('[data-metric="system-health"]').inner_text()
            elements['system_health'] = {
                'found': True,
                'text': system_health,
                'visible': await self.page.locator('[data-metric="system-health"]').is_visible()
            }
        except:
            elements['system_health'] = {'found': False}
            
        # –°—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω–∞
        try:
            daemon_status = await self.page.locator('[data-metric="daemon-status"]').inner_text()
            elements['daemon_status'] = {
                'found': True,
                'text': daemon_status,
                'visible': await self.page.locator('[data-metric="daemon-status"]').is_visible()
            }
        except:
            elements['daemon_status'] = {'found': False}
            
        # API Health
        try:
            api_health = await self.page.locator('[data-metric="api-health"]').inner_text()
            elements['api_health'] = {
                'found': True,
                'text': api_health,
                'visible': await self.page.locator('[data-metric="api-health"]').is_visible()
            }
        except:
            elements['api_health'] = {'found': False}
            
        # –ö–Ω–æ–ø–∫–∏
        buttons = {}
        button_selectors = [
            ('test_button', '//button[contains(text(), "üß™") or contains(text(), "Run Tests")]'),
            ('details_button', '//button[contains(text(), "üìã") or contains(text(), "Test Details")]'),
            ('freeze_button', '//button[contains(text(), "‚ùÑÔ∏è") or contains(text(), "Freeze")]'),
            ('clear_button', '//button[contains(text(), "üóëÔ∏è") or contains(text(), "Clear")]')
        ]
        
        for button_name, selector in button_selectors:
            try:
                button = self.page.locator(selector).first
                buttons[button_name] = {
                    'found': True,
                    'text': await button.inner_text(),
                    'enabled': await button.is_enabled(),
                    'visible': await button.is_visible()
                }
            except:
                buttons[button_name] = {'found': False}
                
        elements['buttons'] = buttons
        
        # –¢–∞–±–ª–∏—Ü—ã
        try:
            filters_rows = await self.page.locator('#filtersTable tbody tr').count()
            elements['filters_table'] = {
                'found': True,
                'rows': filters_rows,
                'has_content': filters_rows > 0
            }
        except:
            elements['filters_table'] = {'found': False}
            
        try:
            tasks_rows = await self.page.locator('#tasksTable tbody tr').count()
            elements['tasks_table'] = {
                'found': True,
                'rows': tasks_rows,
                'has_content': tasks_rows > 0
            }
        except:
            elements['tasks_table'] = {'found': False}
            
        return elements
        
    async def test_functionality(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫"""
        self.logger.info("Testing button functionality...")
        print("üîß Testing button functionality...")
        
        functionality = {}
        
        # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "Run Tests"
        try:
            test_button = self.page.locator('//button[contains(text(), "üß™") or contains(text(), "Run Tests")]').first
            if await test_button.is_visible():
                await test_button.click()
                await self.page.wait_for_timeout(2000)  # –ñ–¥–µ–º —Ä–µ–∞–∫—Ü–∏—é
                
                functionality['test_button_click'] = {
                    'success': True,
                    'message': 'Button clicked successfully'
                }
            else:
                functionality['test_button_click'] = {
                    'success': False,
                    'message': 'Button not visible'
                }
        except Exception as e:
            functionality['test_button_click'] = {
                'success': False,
                'message': f'Click failed: {str(e)}'
            }
            
        return functionality
        
    def check_api_endpoints(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        self.logger.info("Checking API endpoints...")
        print("üîå Checking API endpoints...")
        
        api_checks = {}
        endpoints = [
            ('version', '/api/version'),
            ('stats', '/api/stats'),
            ('daemon_status', '/api/daemon/status'),
            ('tests_status', '/api/tests/status'),
            ('app_logs', '/api/logs/app?limit=10')
        ]
        
        for name, endpoint in endpoints:
            try:
                url = f"{self.base_url}{endpoint}"
                response = requests.get(url, timeout=5)
                api_checks[name] = {
                    'success': True,
                    'status_code': response.status_code,
                    'response_size': len(response.text)
                }
                self.logger.info(f"API {name} OK: {response.status_code}, size={len(response.text)}")
            except Exception as e:
                api_checks[name] = {
                    'success': False,
                    'error': str(e)
                }
                self.logger.error(f"API {name} FAILED: {e}")
                
        return api_checks
        
    def analyze_issues(self):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        elements = self.results.get('elements_analysis', {})
        
        if not elements.get('system_health', {}).get('found'):
            issues.append("‚ùå Missing system health indicator")
            
        if not elements.get('daemon_status', {}).get('found'):
            issues.append("‚ùå Missing daemon status indicator")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫
        buttons = elements.get('buttons', {})
        if not buttons.get('test_button', {}).get('found'):
            issues.append("‚ùå Missing test button")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        api_checks = self.results.get('api_checks', {})
        failed_apis = [name for name, check in api_checks.items() if not check.get('success')]
        if failed_apis:
            issues.append(f"‚ùå Failed API endpoints: {', '.join(failed_apis)}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        if not elements.get('filters_table', {}).get('has_content'):
            issues.append("‚ö†Ô∏è Filters table is empty")
            
        self.results['issues_found'] = issues
        
    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        elements = self.results.get('elements_analysis', {})
        api_checks = self.results.get('api_checks', {})
        
        total_elements = len(elements)
        found_elements = sum(1 for elem in elements.values() if isinstance(elem, dict) and elem.get('found'))
        
        total_apis = len(api_checks)
        working_apis = sum(1 for api in api_checks.values() if api.get('success'))
        
        self.results['summary'] = {
            'elements_found': f"{found_elements}/{total_elements}",
            'apis_working': f"{working_apis}/{total_apis}",
            'issues_count': len(self.results.get('issues_found', [])),
            'screenshots_taken': len(self.results.get('screenshots', [])),
            'overall_status': 'PASS' if len(self.results.get('issues_found', [])) == 0 else 'ISSUES_FOUND'
        }
        
    async def run_full_analysis(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            self.logger.info("Starting full analysis run")
            await self.setup_browser()
            
            print(f"üåê Loading panel at {self.base_url}")
            await self.page.goto(self.base_url, wait_until='networkidle')
            await asyncio.sleep(3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            await self.take_screenshot('main_panel', 'Main dashboard view')
            
            # –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.results['elements_analysis'] = await self.analyze_page_elements()
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await self.take_screenshot('after_analysis', 'Panel state after element analysis')
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            self.results['functionality_tests'] = await self.test_functionality()
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            await self.take_screenshot('final_state', 'Final panel state after tests')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            self.results['api_checks'] = self.check_api_endpoints()
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
            self.analyze_issues()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
            self.generate_summary()
            
        except Exception as e:
            self.logger.exception(f"Analysis failed: {e}")
            print(f"‚ùå Analysis failed: {e}")
            self.results['fatal_error'] = str(e)
        
        finally:
            if self.browser:
                await self.browser.close()
                
        return self.results
        
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results_file = self.report_dir / f'analysis_{self.timestamp}.json'
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
            
        self.logger.info(f"Results saved: {results_file}")
        print(f"üíæ Results saved: {results_file}")
        
        # –ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏
        summary = self.results.get('summary', {})
        summary_lines = [
            "",
            "="*60,
            "üìä VISUAL TEST SUMMARY",
            "="*60,
            f"üåê Panel URL: {self.base_url}",
            f"üéØ Elements found: {summary.get('elements_found', 'N/A')}",
            f"üîå APIs working: {summary.get('apis_working', 'N/A')}",
            f"üì∏ Screenshots: {summary.get('screenshots_taken', 0)}",
            f"‚ö†Ô∏è  Issues: {summary.get('issues_count', 0)}",
            f"üìä Overall status: {summary.get('overall_status', 'UNKNOWN')}",
        ]
        for line in summary_lines:
            if line:
                self.logger.info(line)
            print(line)
        
        if self.results.get('issues_found'):
            self.logger.warning("ISSUES FOUND:")
            print("\nüîç ISSUES FOUND:")
            for issue in self.results['issues_found']:
                self.logger.warning(issue)
                print(f"  {issue}")
                
        print("="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Starting consolidated visual panel analysis...")
    
    analyzer = ConsolidatedVisualTest()
    results = await analyzer.run_full_analysis()
    analyzer.save_results()
    
    return results


if __name__ == "__main__":
    asyncio.run(main())
