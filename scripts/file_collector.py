#!/usr/bin/env python3
"""
File Collector - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—ã–Ω—é

–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤,
—Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –∏ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–æ–≤.

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
1. –î–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ + (–≤–∫–ª—é—á–µ–Ω) / - (–∏—Å–∫–ª—é—á–µ–Ω)
2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ/–∏—Å–∫–ª—é—á–µ–Ω–æ
3. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤: –ø—É—Ç—å + —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞
"""

import argparse
import os
import sys
from pathlib import Path
from typing import List, Set, Tuple


# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
# –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
#DEFAULT_DIRECTORY = "."
DEFAULT_DIRECTORY = r"C:\DEV\hh-applicant-tool\hh_v3\v4\orchestrator\workspaces\REPAIR-2-8-4-001"

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = –≤—Å–µ —Ñ–∞–π–ª—ã)
DEFAULT_INCLUDE_EXTENSIONS = ["py", "md", "txt","json"]

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
DEFAULT_EXCLUDE_EXTENSIONS = ["log", "bak", "pyc"]

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (1MB = 1048576)
DEFAULT_MAX_SIZE = 100 * 1024

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±—Ö–æ–¥–∞
DEFAULT_EXCLUDE_DIRS = ["backup", "examples", ".git", "logs", "__pycache__",".venv","node_modules"]

# –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
# DEFAULT_OUTPUT_FILE = "docs/catalog_v4.md"
DEFAULT_OUTPUT_FILE = "docs/catalog_REPAIR-2-8-4-001.md"

# === –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===


class FileCollector:
    def __init__(self, root_dir: str, include_ext: List[str], exclude_ext: List[str],
                 max_size: int, exclude_dirs: List[str], output_file: str = ""):
        self.root_dir = Path(root_dir).resolve()
        self.include_ext = set(ext.lower().lstrip('.') for ext in include_ext)
        self.exclude_ext = set(ext.lower().lstrip('.') for ext in exclude_ext)
        self.max_size = max_size
        self.exclude_dirs = set(exclude_dirs)
        self.output_file = output_file
        
        self.included_files = []
        self.excluded_files = []
        self.tree_lines = []
        self.output_lines = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.included_dirs = set()
        self.excluded_dirs = set()
        self.total_lines = 0
        self.total_size = 0
        self.cumulative_line = 1  # –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ñ–∞–π–ª–µ
        self.file_line_info = {}  # mapping Path -> (start_line, line_count)
        self.file_contents = {}  # cache file contents

    def write_output(self, text: str, end: str = "\n", to_console: bool = False):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≤—ã–≤–æ–¥ (—Ñ–∞–π–ª –≤—Å–µ–≥–¥–∞, –∫–æ–Ω—Å–æ–ª—å –ø–æ –≤—ã–±–æ—Ä—É)"""
        # –í—Å–µ–≥–¥–∞ –≤ —Ñ–∞–π–ª
        if self.output_file:
            self.output_lines.append(text + end)
        
        # –í –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if to_console:
            print(text, end=end)

    def save_output(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª"""
        if self.output_file and self.output_lines:
            output_path = Path(self.output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.writelines(self.output_lines)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_file}")

    def count_lines(self, text: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ"""
        return len(text.splitlines())

    def should_include_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª –≤ —Å–±–æ—Ä–∫—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if file_path.stat().st_size > self.max_size:
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–µ–∑ —Ç–æ—á–∫–∏
        ext = file_path.suffix.lower().lstrip('.')

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
        if self.include_ext:
            if ext not in self.include_ext:
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if ext in self.exclude_ext:
            return False

        return True

    def should_exclude_dir(self, dir_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –æ–±—Ö–æ–¥–∞"""
        dir_name = dir_path.name
        return dir_name in self.exclude_dirs or dir_name.startswith('.')

    def build_tree(self, current_path: Path = None, prefix: str = "", is_last: bool = True) -> None:
        """–°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        if current_path is None:
            current_path = self.root_dir
            self.tree_lines.append(f"{current_path}")

        try:
            items = sorted(current_path.iterdir(), key=lambda x: (not x.is_dir(), x.name.lower()))
        except PermissionError:
            return

        for i, item in enumerate(items):
            is_last_item = i == len(items) - 1
            connector = "‚îî‚îÄ‚îÄ " if is_last_item else "‚îú‚îÄ‚îÄ "

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤–∫–ª—é—á–µ–Ω–∏—è
            if item.is_file():
                included = self.should_include_file(item)
                symbol = "+" if included else "-"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if included:
                    self.included_files.append(item)
                    self.total_size += item.stat().st_size
                    
                    # –ß–∏—Ç–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    content = self.read_file_content(item)
                    self.file_contents[item] = content
                    line_count = self.count_lines(content)
                    self.file_line_info[item] = (self.cumulative_line, line_count)
                    self.cumulative_line += line_count + 3  # +3 –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –≤ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ
                    parent_dir = item.parent
                    if parent_dir != self.root_dir:
                        self.included_dirs.add(str(parent_dir.relative_to(self.root_dir)))
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–æ–∫–∞—Ö
                    line_info = f"{self.file_line_info[item][0]}, {line_count}"
                    line = f"{prefix}{connector}{symbol} {item.name}  {line_info}"
                else:
                    self.excluded_files.append(item)
                    line = f"{prefix}{connector}{symbol} {item.name}"
                    
            else:  # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                included = not self.should_exclude_dir(item)
                symbol = "+" if included else "-"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                if item != self.root_dir:
                    rel_path = str(item.relative_to(self.root_dir))
                    if included:
                        self.included_dirs.add(rel_path)
                    else:
                        self.excluded_dirs.add(rel_path)

                line = f"{prefix}{connector}{symbol} {item.name}/"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ä–µ–≤–æ
            self.tree_lines.append(line)

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if item.is_dir() and not self.should_exclude_dir(item):
                extension = "    " if is_last_item else "‚îÇ   "
                self.build_tree(item, prefix + extension, is_last_item)

    def read_file_content(self, file_path: Path) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8 –∏ CP1251"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º UTF-8
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    return f.read()
            except UnicodeDecodeError:
                # –ü—Ä–æ–±—É–µ–º CP1251 (Windows-1251) –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    with open(file_path, 'r', encoding='cp1251') as f:
                        return f.read()
                except UnicodeDecodeError:
                    # –ü—Ä–æ–±—É–µ–º Latin-1 –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                    try:
                        with open(file_path, 'r', encoding='latin-1') as f:
                            return f.read()
                    except:
                        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º utf-8 —Å –∑–∞–º–µ–Ω–æ–π –æ—à–∏–±–æ–∫
                        with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                            return f.read()

        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"

    def collect_files(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
        # –í—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
        self.write_output(f"üîç –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏–∑: {self.root_dir}")
        self.write_output(f"üìÅ –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {', '.join(self.include_ext) if self.include_ext else '–≤—Å–µ'}")
        self.write_output(f"üö´ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {', '.join(self.exclude_ext) if self.exclude_ext else '–Ω–µ—Ç'}")
        self.write_output(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.max_size:,} –±–∞–π—Ç")
        self.write_output(f"üö∑ –ò—Å–∫–ª—é—á–∏—Ç—å –ø–∞–ø–∫–∏: {', '.join(self.exclude_dirs) if self.exclude_dirs else '–Ω–µ—Ç'}")
        self.write_output("")

        # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
        self.build_tree()

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
        self.write_output("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.write_output(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.included_files)}")
        self.write_output(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.excluded_files)}")
        self.write_output(f"üìÅ –í–∫–ª—é—á–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(self.included_dirs)}")
        self.write_output(f"üö∑ –ò—Å–∫–ª—é—á–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(self.excluded_dirs)}")
        self.write_output(f"üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {self.total_size:,} –±–∞–π—Ç")
        self.write_output("")

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ä–µ–≤–æ –≤ —Ñ–∞–π–ª
        self.write_output("üìÇ –°–¢–†–£–ö–¢–£–†–ê –ö–ê–¢–ê–õ–û–ì–ê:")
        for line in self.tree_lines:
            self.write_output(line)
        self.write_output("\n" + "="*80 + "\n")

        # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª
        self.write_output("üìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–û–í:")
        self.write_output("="*80)

        for i, file_path in enumerate(self.included_files, 1):
            relative_path = file_path.relative_to(self.root_dir)
            file_size = file_path.stat().st_size
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–∞—Ö –∏–∑ –∫—ç—à–∞
            start_line, line_count = self.file_line_info[file_path]
            content = self.file_contents[file_path]

            self.write_output(f"\n{'='*40} –§–ê–ô–õ {i}/{len(self.included_files)} {'='*40}")
            self.write_output(f"üìÅ –ü—É—Ç—å: {relative_path}")
            self.write_output(f"üìè –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç")
            self.write_output(f"üî§ –¢–∏–ø: {file_path.suffix}")
            self.write_output(f"üìç –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏: {start_line}")
            self.write_output(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {line_count}")
            self.write_output("-" * 80)

            self.write_output(content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–æ–∫
            self.total_lines += line_count
            
            self.write_output("\n" + "="*80)

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.included_files)}")
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.excluded_files)}")
        print(f"üìÅ –í–∫–ª—é—á–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(self.included_dirs)}")
        print(f"üö∑ –ò—Å–∫–ª—é—á–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(self.excluded_dirs)}")
        print(f"üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {self.total_size:,} –±–∞–π—Ç")
        print(f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {self.total_lines:,}")
        print("="*60)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        self.save_output()


def main():
    parser = argparse.ArgumentParser(
        description="File Collector - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—ã–Ω—é",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python file_collector.py . --include txt,py,md --exclude log,bak --max-size 1048576
  python file_collector.py /path/to/project --include py --exclude pyc --exclude-dirs .git,__pycache__,node_modules
  python file_collector.py docs/ --include md,txt --max-size 524288
  python file_collector.py . --output docs/catalog.md --include py,md,txt

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—Ü–∏–∏ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
        """
    )

    parser.add_argument('directory', nargs='?', default=DEFAULT_DIRECTORY,
                       help='–ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--include', nargs='+', default=DEFAULT_INCLUDE_EXTENSIONS,
                       help='–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ —Ç–æ—á–∫–∏)')
    parser.add_argument('--exclude', nargs='+', default=DEFAULT_EXCLUDE_EXTENSIONS,
                       help='–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ —Ç–æ—á–∫–∏)')
    parser.add_argument('--max-size', type=int, default=DEFAULT_MAX_SIZE,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1MB)')
    parser.add_argument('--exclude-dirs', nargs='+', default=DEFAULT_EXCLUDE_DIRS,
                       help='–ò–º–µ–Ω–∞ –ø–∞–ø–æ–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±—Ö–æ–¥–∞')
    parser.add_argument('--output', default=DEFAULT_OUTPUT_FILE,
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)')

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
    if not os.path.exists(args.directory):
        print(f"‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {args.directory}")
        sys.exit(1)

    if not os.path.isdir(args.directory):
        print(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º: {args.directory}")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    collector = FileCollector(
        root_dir=args.directory,
        include_ext=args.include,
        exclude_ext=args.exclude,
        max_size=args.max_size,
        exclude_dirs=args.exclude_dirs,
        output_file=args.output
    )

    try:
        collector.collect_files()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
